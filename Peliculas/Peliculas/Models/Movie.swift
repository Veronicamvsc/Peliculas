import Foundation // ðŸ“Œ Importamos Foundation para manejar JSON y URLs.

struct MovieResponse: Codable { // ðŸ“Œ Modelo que representa la respuesta de la API.
    let results: [Movie] // âœ… Contiene una lista de pelÃ­culas obtenidas de la API.
}

struct Movie: Codable, Identifiable { // ðŸ“Œ Modelo de una pelÃ­cula individual, conforme a `Codable` para decodificaciÃ³n JSON y `Identifiable` para listas en SwiftUI.
    let id: Int // âœ… Identificador Ãºnico de la pelÃ­cula.
    let title: String // âœ… TÃ­tulo de la pelÃ­cula.
    let overview: String // âœ… Sinopsis de la pelÃ­cula.
    let posterPath: String? // âœ… Ruta de la imagen del pÃ³ster (puede ser `nil` si no hay imagen).
    let releaseDate: String // âœ… Fecha de estreno de la pelÃ­cula en formato `YYYY-MM-DD`.
    let voteAverage: Double // âœ… PuntuaciÃ³n promedio de la pelÃ­cula.
    let genreIds: [Int] // âœ… Lista de identificadores de gÃ©neros asociados a la pelÃ­cula.

    enum CodingKeys: String, CodingKey { // ðŸ“Œ Mapea los nombres de los atributos JSON con los nombres de Swift.
        case id, title, overview // âœ… Los nombres coinciden directamente con la API.
        case posterPath = "poster_path" // âœ… Renombramos `poster_path` (API) a `posterPath` (Swift).
        case releaseDate = "release_date" // âœ… Renombramos `release_date` (API) a `releaseDate` (Swift).
        case voteAverage = "vote_average" // âœ… Renombramos `vote_average` (API) a `voteAverage` (Swift).
        case genreIds = "genre_ids" // âœ… Renombramos `genre_ids` (API) a `genreIds` (Swift).
    }
    
    var posterURL: URL? { // ðŸ“Œ Propiedad calculada para generar la URL completa del pÃ³ster.
        if let posterPath = posterPath { // âœ… Verifica si `posterPath` tiene un valor.
            return URL(string: "https://image.tmdb.org/t/p/w500\(posterPath)") // âœ… Construye la URL del pÃ³ster con el tamaÃ±o `w500`.
        }
        return nil // âœ… Retorna `nil` si no hay `posterPath` disponible.
    }
}
