import SwiftUI

struct MovieDetailView: View {
    let movie: Movie // üü¢ Recibe una pel√≠cula como par√°metro para mostrar sus detalles.

    var body: some View {
        ScrollView { // üîµ Permite desplazarse si el contenido es extenso.
            VStack(alignment: .leading, spacing: 16) { // üü¢ Organiza los elementos en una columna alineada a la izquierda con espaciado.

                // ‚úÖ Imagen de la Pel√≠cula (Carga asincr√≥nica)
                AsyncImage(url: movie.posterURL) { image in
                    image.resizable()
                        .aspectRatio(contentMode: .fill) // üîµ Ajusta la imagen manteniendo su relaci√≥n de aspecto.
                } placeholder: {
                    ProgressView() // üü¢ Muestra un indicador de carga mientras se descarga la imagen.
                }
                .frame(height: 300) // üîµ Define una altura fija.
                .clipped() // üü¢ Recorta la imagen si es necesario para ajustarse al frame.

                // ‚úÖ Informaci√≥n de la Pel√≠cula
                VStack(alignment: .leading, spacing: 8) { // üîµ Contenedor con informaci√≥n textual.
                    HStack { // üü¢ Organiza el t√≠tulo y la estrella en una misma fila.
                        Text(movie.title)
                            .font(.title) // üîµ Establece un tama√±o de fuente grande.
                            .bold() // üü¢ Texto en negrita.

                        Image(systemName: "star.fill") // üîµ √çcono de estrella (‚≠ê).
                            .foregroundColor(.yellow) // üü¢ Color amarillo para la estrella.
                    }

                    Text(movie.releaseDate) // üîµ Muestra la fecha de lanzamiento.
                        .font(.subheadline) // üü¢ Fuente m√°s peque√±a.
                        .foregroundColor(.red) // üîµ Color rojo para resaltar.

                    // ‚úÖ Secci√≥n de Sinopsis
                    Text("Sinopsis")
                        .font(.headline) // üîµ Fuente destacada.
                        .foregroundColor(.gray) // üü¢ Color gris.

                    Text(movie.overview) // üîµ Muestra la sinopsis de la pel√≠cula.
                        .font(.body) // üü¢ Fuente est√°ndar.
                        .foregroundColor(.primary) // üîµ Se adapta al tema oscuro/claro.
                }
                .padding(.horizontal) // üü¢ Espaciado lateral para mejor presentaci√≥n.

                // ‚úÖ Secci√≥n de G√©neros (si existen)
                if !movie.genreIds.isEmpty { // üîµ Verifica que la pel√≠cula tenga g√©neros asignados.
                    Text("Categor√≠as")
                        .font(.headline) // üü¢ Fuente destacada.
                        .foregroundColor(.gray) // üîµ Color gris.
                        .padding(.horizontal) // üü¢ Espaciado lateral.

                    // ‚úÖ Scroll Horizontal para mostrar los g√©neros
                    ScrollView(.horizontal, showsIndicators: false) { // üîµ Deslizable de izquierda a derecha sin barra de desplazamiento.
                        HStack { // üü¢ Organiza los g√©neros en una fila.
                            ForEach(movie.genreIds, id: \.self) { genreId in // üîµ Itera sobre los IDs de los g√©neros.
                                Text(getGenreName(for: genreId)) // üü¢ Obtiene el nombre del g√©nero.
                                    .font(.caption) // üîµ Fuente peque√±a.
                                    .padding(8) // üü¢ Espaciado interno.
                                    .background(Color(.systemGray6)) // üîµ Fondo gris claro.
                                    .cornerRadius(10) // üü¢ Bordes redondeados.
                            }
                        }
                        .padding(.horizontal) // üîµ Espaciado lateral dentro del scroll.
                    }
                }
            }
        }
        .navigationBarTitleDisplayMode(.inline) // üü¢ Hace que el t√≠tulo de la barra de navegaci√≥n sea peque√±o.
    }

    // ‚úÖ Funci√≥n para obtener el nombre del g√©nero a partir de su ID
    func getGenreName(for id: Int) -> String {
        let genres: [Int: String] = [ // üîµ Diccionario que asocia IDs con nombres de g√©nero.
            28: "Acci√≥n", 12: "Aventura", 16: "Animaci√≥n", 35: "Comedia",
            80: "Crimen", 99: "Documental", 18: "Drama", 10751: "Familiar",
            14: "Fantas√≠a", 36: "Historia", 27: "Terror", 10402: "M√∫sica",
            9648: "Misterio", 10749: "Romance", 878: "Ciencia Ficci√≥n",
            10770: "TV Movie", 53: "Suspenso", 10752: "B√©lica", 37: "Western"
        ]
        return genres[id] ?? "Desconocido" // üü¢ Devuelve el nombre del g√©nero o "Desconocido" si el ID no est√° en la lista.
    }
}
