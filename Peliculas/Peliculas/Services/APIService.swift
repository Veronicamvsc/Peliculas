import Foundation // ðŸ”µ Importa Foundation, necesario para manejar URLs, JSON y red.

class APIService { // ðŸŸ¢ Define la clase `APIService`, encargada de hacer llamadas a la API.

    // âœ… FunciÃ³n para obtener las pelÃ­culas mÃ¡s valoradas
    func fetchTopRatedMovies(completion: @escaping (Result<[Movie], Error>) -> Void) {
        // ðŸ”µ Construimos la URL de la API con el endpoint "top_rated"
        guard let url = URL(string: "\(Constants.baseURL)/movie/top_rated?language=es-ES") else {
            return // ðŸ”´ Si la URL no es vÃ¡lida, se sale de la funciÃ³n sin hacer la peticiÃ³n.
        }

        // âœ… ConfiguraciÃ³n de la solicitud HTTP (Request)
        var request = URLRequest(url: url) // ðŸ”µ Crea una solicitud con la URL.
        request.httpMethod = "GET" // ðŸŸ¢ Especifica que es una solicitud GET (consulta de datos).

        // ðŸ”µ Cabeceras necesarias para la API
        request.setValue("application/json", forHTTPHeaderField: "Content-Type") // ðŸŸ¢ Indica que el contenido serÃ¡ JSON.
        request.setValue(Constants.bearerToken, forHTTPHeaderField: "Authorization") // âœ… Agrega el Bearer Token para autenticaciÃ³n.

        // âœ… Inicia la solicitud de red con URLSession
        URLSession.shared.dataTask(with: request) { data, response, error in
            // ðŸ”´ Manejo de error si falla la conexiÃ³n
            if let error = error {
                completion(.failure(error)) // ðŸŸ¢ Devuelve el error al llamar `completion`.
                return
            }
            
            // ðŸ”´ Verifica si se recibiÃ³ data vÃ¡lida
            guard let data = data else {
                completion(.failure(NSError(domain: "DataError", code: -1, userInfo: nil)))
                // ðŸŸ¢ Si no hay datos, devuelve un error personalizado.
                return
            }
            
            do {
                // âœ… Decodifica la respuesta JSON en un objeto `MovieResponse`
                let movieResponse = try JSONDecoder().decode(MovieResponse.self, from: data)
                
                // ðŸ”µ Llama al completion en el hilo principal para actualizar la UI
                DispatchQueue.main.async {
                    completion(.success(movieResponse.results)) // ðŸŸ¢ Devuelve la lista de pelÃ­culas.
                }
            } catch {
                completion(.failure(error)) // ðŸ”´ Manejo de error si falla el parsing del JSON.
            }
        }.resume() // ðŸ”µ Inicia la tarea de red.
    }
}

