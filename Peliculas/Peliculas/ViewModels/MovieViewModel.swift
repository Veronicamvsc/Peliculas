import Foundation
import Combine // ğŸŸ¢ Importa Combine para manejar programaciÃ³n reactiva y suscripciones.

class MovieViewModel: ObservableObject { // ğŸ”µ Clase que actÃºa como ViewModel en el patrÃ³n MVVM.
    @Published var movies: [Movie] = [] // ğŸŸ¢ Lista de pelÃ­culas obtenidas desde la API.
    @Published var searchText: String = "" // ğŸ”µ Texto ingresado en la barra de bÃºsqueda.

    private let apiService = APIService() // ğŸŸ¢ Instancia del servicio que obtiene datos de la API.
    private var cancellables = Set<AnyCancellable>() // ğŸ”µ Conjunto de suscripciones para manejar Combine.

    init() {
        fetchMovies() // ğŸŸ¢ Llama a la funciÃ³n para obtener las pelÃ­culas al iniciar.

        // âœ… Filtrado de pelÃ­culas en tiempo real cuando cambia el texto de bÃºsqueda
        $searchText // ğŸ”µ Escucha cambios en `searchText`
            .debounce(for: .milliseconds(500), scheduler: RunLoop.main) // ğŸŸ¢ Espera 500 ms antes de ejecutar la bÃºsqueda (para evitar llamadas innecesarias mientras el usuario escribe).
            .sink { [weak self] searchText in // ğŸ”µ `sink` recibe el nuevo valor de `searchText`.
                self?.filterMovies(with: searchText) // ğŸŸ¢ Llama a `filterMovies` para actualizar la lista.
            }
            .store(in: &cancellables) // ğŸ”µ Guarda la suscripciÃ³n para evitar fugas de memoria.
    }
    
    // âœ… FunciÃ³n para obtener las pelÃ­culas mÃ¡s valoradas desde la API
    func fetchMovies() {
        apiService.fetchTopRatedMovies { [weak self] result in // ğŸ”µ Llama al servicio API.
            switch result {
            case .success(let movies):
                self?.movies = movies // ğŸŸ¢ Actualiza la lista con las pelÃ­culas obtenidas.
            case .failure(let error):
                print("Error fetching movies: \(error)") // ğŸ”´ Muestra un error en consola si falla la llamada a la API.
            }
        }
    }

    // âœ… FunciÃ³n para filtrar pelÃ­culas segÃºn el texto ingresado
    func filterMovies(with text: String) {
        if text.isEmpty { // ğŸ”µ Si el campo de bÃºsqueda estÃ¡ vacÃ­o...
            fetchMovies() // ğŸŸ¢ Recarga todas las pelÃ­culas desde la API.
        } else {
            movies = movies.filter { $0.title.lowercased().contains(text.lowercased()) }
            // ğŸŸ¢ Filtra las pelÃ­culas que contengan el texto en su tÃ­tulo (sin importar mayÃºsculas o minÃºsculas).
        }
    }
}
